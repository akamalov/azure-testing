- name: Test azure_rm_networkinterface
  hosts: all
  connection: local
  vars:
      resource_group: Testing
      playbook_debug: yes
  tasks:

      - name: Delete network interface, if it exists
        azure_rm_networkinterface:
            name: nic003
            state: absent
            resource_group: "{{ resource_group }}"
            debug: "{{ playbook_debug }}"
            log_mode: file

      - name: Create virtual network
        azure_rm_virtualnetwork:
            name: vnet001
            resource_group: "{{ resource_group }}"
            address_prefixes_cidr: "10.1.0.0/16"
            debug: "{{ playbook_debug }}"
            log_mode: file  
        
      - name: Create subnet
        azure_rm_subnet:
            name: subnet001
            resource_group: "{{ resource_group }}"
            virtual_network_name: vnet001
            address_prefix_cidr: "10.1.0.0/24"
            debug: "{{ playbook_debug }}"
            log_mode: file  
     
      - name: Create security group
        azure_rm_securitygroup:
            name: secgroup001
            resource_group: "{{ resource_group }}"
    
      - name: Create a public ip
        azure_rm_publicipaddress:
            name: publicip001
            resource_group: "{{ resource_group }}"
            allocation_method: "Static"
 
      - name: Should require subnet when state is present
        azure_rm_networkinterface:
            name: nic003
            resource_group: "{{ resource_group }}"
            debug: "{{ playbook_debug }}"
            log_mode: file
            virtual_network_name: vnet001
            security_group_name: secgroup001
            public_ip_address_name: publicip001
        register: output
        ignore_errors: yes
    
      - debug: var=output
        when: playbook_debug

      - assert: 
            that:
                - output.failed
                - "'subnet' in output.msg"
 
      - name: Should require security_group_name when state is present
        azure_rm_networkinterface:
            name: nic003
            resource_group: "{{ resource_group }}"
            debug: "{{ playbook_debug }}"
            log_mode: file
            virtual_network_name: vnet001
            public_ip_address_name: publicip001
            subnet: subnet001 
        register: output
        ignore_errors: yes
    
      - debug: var=output
        when: playbook_debug

      - assert: 
            that:
                - output.failed
                - "'security_group_name' in output.msg"
        
      - name: Should require virtual_network_name when state is present
        azure_rm_networkinterface:
            name: nic003
            resource_group: "{{ resource_group }}"
            debug: "{{ playbook_debug }}"
            log_mode: file
            security_group_name: secgroup001
            public_ip_address_name: publicip001
            subnet: subnet001 
        register: output
        ignore_errors: yes
    
      - debug: var=output
        when: playbook_debug

      - assert: 
            that:
                - output.failed
                - "'virtual_network_name' in output.msg"

      - name: Create nic
        azure_rm_networkinterface:
            name: nic003
            resource_group: "{{ resource_group }}"
            debug: "{{ playbook_debug }}"
            log_mode: file
            virtual_network_name: vnet001
            subnet: subnet001 
            security_group_name: secgroup001
            public_ip_address_name: publicip001
        register: output
    
      - debug: var=output

      - name: Should be idempotent
        azure_rm_networkinterface:
            name: nic003
            resource_group: "{{ resource_group }}"
            debug: "{{ playbook_debug }}"
            log_mode: file
            virtual_network_name: vnet001
            subnet: subnet001 
            security_group_name: secgroup001
            public_ip_address_name: publicip001
        register: output
    
      - debug: var=output

      - assert:
            that: not output.changed

      - name: Should change private IP address 
        azure_rm_networkinterface:
            name: nic003
            resource_group: "{{ resource_group }}"
            debug: "{{ playbook_debug }}"
            private_ip_address: 10.1.0.10
            private_ip_allocation_method: Static
            log_mode: file
            virtual_network_name: vnet001
            subnet: subnet001 
            security_group_name: secgroup001
            public_ip_address_name: publicip001
        register: output
    
      - debug: var=output

      - assert:
            that: 
                - output.changed
                - output.results.ip_configuration.private_ip_address == '10.1.0.10'
                - output.results.ip_configuration.private_ip_allocation_method == 'Static'
